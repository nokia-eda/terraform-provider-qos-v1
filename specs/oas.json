{
  "components": {
    "schemas": {
      "AppGroup": {
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "preferredVersion": {
            "$ref": "#/components/schemas/AppGroupVersion"
          },
          "versions": {
            "items": {
              "$ref": "#/components/schemas/AppGroupVersion"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AppGroupVersion": {
        "properties": {
          "groupVersion": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorIndex": {
        "properties": {
          "index": {
            "format": "int64",
            "type": "integer"
          }
        },
        "title": "Wrapper for index information inside an error.",
        "type": "object"
      },
      "ErrorItem": {
        "properties": {
          "error": {
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorResponse": {
        "description": "Generic error response for REST APIs",
        "properties": {
          "code": {
            "description": "the numeric HTTP error code for the response.",
            "format": "int64",
            "type": "integer"
          },
          "details": {
            "description": "The optional details of the error response.",
            "type": "string"
          },
          "dictionary": {
            "additionalProperties": true,
            "description": "Dictionary/map of associated data/information relevant to the error.\nThe error \"message\" may contain {{name}} escapes that should be substituted\nwith information from this dictionary.",
            "type": "object"
          },
          "domain": {
            "description": "The \"domain\" for the error.  If empty, it is an EDA\ncore error.  Alternatively it can be an EDA application\n\"apiVersion\" value (e.g. interfaces.eda.nokia.com/v1alpha1)\nindicating that the error is specific to that application.\nThe domain gives the receiver information that they can use\nto help them interpret the \"internal\" error code value, or\nto find an internationalization translation for the message.",
            "type": "string"
          },
          "errors": {
            "description": "Collection of errors in cases where more than one exists. This needs to be\nflexible so we can support multiple formats",
            "items": {
              "$ref": "#/components/schemas/ErrorItem"
            },
            "type": "array"
          },
          "index": {
            "$ref": "#/components/schemas/ErrorIndex"
          },
          "internal": {
            "description": "Internal error code in cases where we don't have an array of errors",
            "format": "int64",
            "type": "integer"
          },
          "message": {
            "description": "The basic text error message for the error response.",
            "type": "string"
          },
          "ref": {
            "description": "Reference to the error source. Should typically be the URI of the request",
            "type": "string"
          },
          "type": {
            "description": "URI pointing at a document that describes the error and mitigation steps\nIf there is no document, point to the RFC for the HTTP error code",
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "K8SPatchOp": {
        "properties": {
          "from": {
            "type": "string"
          },
          "op": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {
            "type": "object"
          },
          "x-permissive": {
            "type": "boolean"
          }
        },
        "required": [
          "op",
          "path"
        ],
        "type": "object"
      },
      "OverlayState": {
        "properties": {
          "links": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoOverlayLink"
            },
            "type": "object"
          },
          "nodes": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoOverlayNode"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Patch": {
        "items": {
          "$ref": "#/components/schemas/K8SPatchOp"
        },
        "type": "array"
      },
      "Resource": {
        "properties": {
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespaced": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "boolean"
          },
          "singularName": {
            "type": "string"
          },
          "uiCategory": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceHistory": {
        "items": {
          "$ref": "#/components/schemas/ResourceHistoryEntry"
        },
        "type": "array"
      },
      "ResourceHistoryEntry": {
        "properties": {
          "author": {
            "type": "string"
          },
          "changeType": {
            "type": "string"
          },
          "commitTime": {
            "format": "date-time",
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "transactionId": {
            "format": "uint64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ResourceList": {
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "groupVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/Resource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ResourceTopology": {
        "properties": {
          "topology": {
            "$ref": "#/components/schemas/OverlayState"
          },
          "topologyMetadata": {
            "$ref": "#/components/schemas/Topology"
          }
        },
        "type": "object"
      },
      "Status": {
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/StatusDetails"
          },
          "kind": {
            "type": "string"
          },
          "string": {
            "type": "string"
          }
        },
        "title": "Status is a return value for calls that don't return other objects.",
        "type": "object"
      },
      "StatusDetails": {
        "properties": {
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoAttrMetadata": {
        "properties": {
          "type": {
            "type": "string"
          },
          "ui_description": {
            "type": "string"
          },
          "ui_description_key": {
            "type": "string"
          },
          "ui_name": {
            "type": "string"
          },
          "ui_name_key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoElemMetadata": {
        "properties": {
          "attributes": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoAttrMetadata"
            },
            "type": "object"
          },
          "schema": {
            "$ref": "#/components/schemas/TopoSchema"
          },
          "subtitle": {
            "type": "string"
          },
          "subtitle_key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoLinkEndpoint": {
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "node_key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoNodeGrouping": {
        "properties": {
          "group": {
            "type": "string"
          },
          "tier": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TopoOverlayEndpoint": {
        "properties": {
          "attributes": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "cr_name": {
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "overlays": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoOverlayEndpointState"
            },
            "type": "object"
          },
          "schema": {
            "$ref": "#/components/schemas/TopoSchema"
          },
          "state": {
            "format": "int64",
            "type": "integer"
          },
          "ui_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoOverlayEndpointState": {
        "properties": {
          "state": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TopoOverlayLink": {
        "properties": {
          "attributes": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "cr_name": {
            "type": "string"
          },
          "endpoint_a": {
            "$ref": "#/components/schemas/TopoLinkEndpoint"
          },
          "endpoint_a_details": {
            "$ref": "#/components/schemas/TopoOverlayEndpoint"
          },
          "endpoint_b": {
            "$ref": "#/components/schemas/TopoLinkEndpoint"
          },
          "endpoint_b_details": {
            "$ref": "#/components/schemas/TopoOverlayEndpoint"
          },
          "key": {
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "overlays": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoOverlayLinkState"
            },
            "type": "object"
          },
          "schema": {
            "$ref": "#/components/schemas/TopoSchema"
          },
          "state": {
            "format": "int64",
            "type": "integer"
          },
          "ui_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoOverlayLinkState": {
        "properties": {
          "state": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TopoOverlayNode": {
        "properties": {
          "attributes": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "badges": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "cr_name": {
            "type": "string"
          },
          "grouping": {
            "$ref": "#/components/schemas/TopoNodeGrouping"
          },
          "key": {
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "overlays": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoOverlayNodeState"
            },
            "type": "object"
          },
          "schema": {
            "$ref": "#/components/schemas/TopoSchema"
          },
          "state": {
            "format": "int64",
            "type": "integer"
          },
          "ui_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoOverlayNodeState": {
        "properties": {
          "badges": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "state": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TopoSchema": {
        "properties": {
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Topology": {
        "properties": {
          "endpoints": {
            "$ref": "#/components/schemas/TopoElemMetadata"
          },
          "group": {
            "type": "string"
          },
          "grouping": {
            "$ref": "#/components/schemas/TopoSchema"
          },
          "links": {
            "$ref": "#/components/schemas/TopoElemMetadata"
          },
          "name": {
            "type": "string"
          },
          "nodes": {
            "$ref": "#/components/schemas/TopoElemMetadata"
          },
          "ui_description": {
            "type": "string"
          },
          "ui_description_key": {
            "type": "string"
          },
          "ui_name": {
            "type": "string"
          },
          "ui_name_key": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UIResult": {
        "type": "string"
      },
      "com.nokia.eda.qos.v1.EgressPolicy": {
        "description": "EgressPolicy is the Schema for the egresspolicys API",
        "properties": {
          "apiVersion": {
            "default": "qos.eda.nokia.com/v1",
            "pattern": "^qos\\.eda\\.nokia\\.com/v1$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The apiVersion must be set to qos.eda.nokia.com/v1",
              "ui-visible-if": "false"
            }
          },
          "kind": {
            "default": "EgressPolicy",
            "pattern": "^EgressPolicy$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The kind must be set to EgressPolicy",
              "ui-visible-if": "false"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/com.nokia.eda.qos.v1.EgressPolicy_metadata"
          },
          "spec": {
            "description": "EgressPolicySpec defines the desired state of EgressPolicy",
            "properties": {
              "dot1pRewritePolicy": {
                "description": "Dot1pRewritePolicy enables the configuration of rewrite policies for Dot1p values. It includes mappings of forwarding classes to Dot1p values, with options for drop probability-specific overrides within each forwarding class.",
                "properties": {
                  "dot1pMap": {
                    "description": "Map of forwarding classes to PCP values",
                    "items": {
                      "properties": {
                        "dropProbability": {
                          "description": "Drop probability specific overrides within the forwarding class",
                          "items": {
                            "properties": {
                              "level": {
                                "description": "A drop probability level within the forwarding class for which a different remarking is desired",
                                "enum": [
                                  "High",
                                  "Medium",
                                  "Low"
                                ],
                                "title": "Level",
                                "type": "string",
                                "x-eda-nokia-com": {
                                  "ui-unique-key": true
                                }
                              },
                              "pcpValue": {
                                "description": "The PCP value to be used for packets associated with the forwarding class and the specific drop probability. This overrides the general PCP value.",
                                "maximum": 7,
                                "minimum": 0,
                                "title": "PCP Value",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "title": "Drop Probability",
                          "type": "array"
                        },
                        "forwardingClasses": {
                          "description": "The forwarding class matched to apply the rewrite policy",
                          "items": {
                            "type": "string"
                          },
                          "title": "Forwarding Class",
                          "type": "array",
                          "x-eda-nokia-com": {
                            "ui-auto-completes": [
                              {
                                "condition": "true",
                                "group": "qos.eda.nokia.com",
                                "resource": "forwardingclasss",
                                "type": "gvr",
                                "version": "v1"
                              }
                            ],
                            "ui-unique-key": true
                          }
                        },
                        "pcpValue": {
                          "description": "The PCP value to be used for all packets associated with the forwarding class, except those with a drop-probability-specific or profile-specific override",
                          "maximum": 7,
                          "minimum": 0,
                          "title": "PCP Value",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "forwardingClasses"
                      ],
                      "type": "object"
                    },
                    "title": "Map",
                    "type": "array"
                  }
                },
                "required": [
                  "dot1pMap"
                ],
                "title": "Dot1p Rewrite Policy",
                "type": "object",
                "x-eda-nokia-com": {
                  "ui-column-span": 4,
                  "ui-presence-toggle": true
                }
              },
              "dscpRewritePolicy": {
                "description": "DSCPRewritePolicy enables the configuration of rewrite policies for Differentiated Services Code Point (DSCP) values. It includes mappings of forwarding classes to DSCP values, with options for drop probability-specific overrides within each forwarding class.  If a DSCPRewritePolicy is not specified, the DSCP value of the packet is unchanged. If a DSCP policy is specific and ECN is enabled on any of the queues, the DSCP policy will be applied to all ECN capable packets.",
                "properties": {
                  "dscpMap": {
                    "description": "Map of forwarding classes to DSCP values.",
                    "items": {
                      "properties": {
                        "dropProbability": {
                          "description": "A drop probability within the forwarding class for which a different remarking is desired.",
                          "items": {
                            "properties": {
                              "dscp": {
                                "description": "The DSCP value to be used for packets associated with the forwarding class and the specific drop probability. This overrides the general DSCP value.",
                                "maximum": 63,
                                "minimum": 0,
                                "title": "DSCP",
                                "type": "integer"
                              },
                              "level": {
                                "description": "A drop probability level within the forwarding class for which a different remarking is desired.",
                                "enum": [
                                  "High",
                                  "Medium",
                                  "Low"
                                ],
                                "title": "Level",
                                "type": "string",
                                "x-eda-nokia-com": {
                                  "ui-unique-key": true
                                }
                              }
                            },
                            "type": "object"
                          },
                          "title": "Drop Probability",
                          "type": "array"
                        },
                        "dscp": {
                          "description": "The DSCP value to be used for all packets associated with the forwarding class, except those with a drop-probability-specific or profile-specific override.",
                          "maximum": 63,
                          "minimum": 0,
                          "title": "DSCP",
                          "type": "integer"
                        },
                        "forwardingClasses": {
                          "description": "The forwarding class matched to apply the rewrite policy.",
                          "items": {
                            "type": "string"
                          },
                          "title": "Forwarding Class",
                          "type": "array",
                          "x-eda-nokia-com": {
                            "ui-auto-completes": [
                              {
                                "condition": "true",
                                "group": "qos.eda.nokia.com",
                                "resource": "forwardingclasss",
                                "type": "gvr",
                                "version": "v1"
                              }
                            ],
                            "ui-unique-key": true
                          }
                        }
                      },
                      "required": [
                        "forwardingClasses"
                      ],
                      "type": "object"
                    },
                    "title": "Map",
                    "type": "array"
                  }
                },
                "required": [
                  "dscpMap"
                ],
                "title": "DSCP Rewrite Policy",
                "type": "object",
                "x-eda-nokia-com": {
                  "ui-presence-toggle": true
                }
              },
              "forwardingClassToQueueMapping": {
                "description": "Forwarding class to queue mapping policy.",
                "items": {
                  "properties": {
                    "forwardingClasses": {
                      "description": "The forwarding classes to which the mapping applies, these are references to ForwardingClass resources.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "title": "Forwarding Classes",
                      "type": "array",
                      "x-eda-nokia-com": {
                        "ui-auto-completes": [
                          {
                            "condition": "true",
                            "group": "qos.eda.nokia.com",
                            "resource": "forwardingclasss",
                            "type": "gvr",
                            "version": "v1"
                          }
                        ],
                        "ui-column-span": 2
                      }
                    },
                    "queue": {
                      "description": "The queue to which the forwarding classes are mapped, this is a reference to a Queue resource.",
                      "title": "Queue",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-auto-completes": [
                          {
                            "condition": "true",
                            "group": "qos.eda.nokia.com",
                            "resource": "queues",
                            "type": "gvr",
                            "version": "v1"
                          }
                        ],
                        "ui-column-span": 2
                      }
                    },
                    "queueGroup": {
                      "description": "The queue-group name for queue to forwarding class mapping.",
                      "title": "Queue Group",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-column-span": 2
                      }
                    }
                  },
                  "required": [
                    "forwardingClasses",
                    "queue"
                  ],
                  "type": "object"
                },
                "title": "Forwarding Class to Queue Mapping",
                "type": "array"
              },
              "pfcDeadlockAvoidance": {
                "description": "Parameters related to avoid a deadlock related to pfc on outgoing interface.",
                "properties": {
                  "deadlockAvoidance": {
                    "description": "Parameters related to avoid a deadlock related to pfc on outgoing interface",
                    "title": "Deadlock Avoidance",
                    "type": "boolean",
                    "x-eda-nokia-com": {
                      "ui-column-span": 2
                    }
                  },
                  "deadlockDetectionTimer": {
                    "description": "Number of milliseconds during which outgoing interface is receiving pfc-pause-frames before triggering recovery-timer.",
                    "title": "Deadlock Detection Timer",
                    "type": "integer",
                    "x-eda-nokia-com": {
                      "ui-column-span": 2
                    }
                  },
                  "deadlockRecoveryTimer": {
                    "description": "Number of milliseconds during which the pfc-pause-frames will be ignored.",
                    "title": "Deadlock Recovery Timer",
                    "type": "integer",
                    "x-eda-nokia-com": {
                      "ui-column-span": 2
                    }
                  }
                },
                "required": [
                  "deadlockAvoidance",
                  "deadlockDetectionTimer",
                  "deadlockRecoveryTimer"
                ],
                "title": "Deadlock Avoidance",
                "type": "object",
                "x-eda-nokia-com": {
                  "ui-column-span": 2,
                  "ui-presence-toggle": true
                }
              },
              "queueManagement": {
                "description": "Queue management policy for egress queues.",
                "items": {
                  "properties": {
                    "queues": {
                      "description": "List of queues.",
                      "items": {
                        "properties": {
                          "committedBurstSize": {
                            "description": "Committed Burst Size.",
                            "format": "int32",
                            "title": "Committed Burst Size",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "maximumBurstSize": {
                            "description": "Maximum amount of shared buffer memory available to the queue in bytes.",
                            "format": "int32",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "title": "Maximum Burst Size",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "pfcPauseFramePriority": {
                            "description": "The pfc-priority received in pfc-pause-frame.",
                            "title": "PFC Priority",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "queue": {
                            "description": "Reference to a Queue resource.",
                            "title": "Queue",
                            "type": "string",
                            "x-eda-nokia-com": {
                              "ui-auto-completes": [
                                {
                                  "condition": "true",
                                  "group": "qos.eda.nokia.com",
                                  "resource": "queues",
                                  "type": "gvr",
                                  "version": "v1"
                                }
                              ],
                              "ui-column-span": 2
                            }
                          },
                          "schedulerPeakRatePercent": {
                            "description": "The peak rate percent used by the scheduler for the queue.",
                            "maximum": 100,
                            "minimum": 1,
                            "title": "Scheduler Peak Rate Percent",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "schedulerPriorityLevel": {
                            "description": "The priority level at this Port Scheduler Policy.",
                            "maximum": 8,
                            "minimum": 1,
                            "title": "Scheduler Priority Level",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "schedulerWeight": {
                            "description": "The weight factor used for the WRR scheduler. If any of the queues have a configured weight the set of queues will use a WRR scheduler and thus all queues must have a weight configured.  If no weights are set then the queues are scheduled in strict priority from lowest to higher queue ID.",
                            "maximum": 255,
                            "minimum": 0,
                            "title": "Scheduler Weight",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          }
                        },
                        "required": [
                          "maximumBurstSize",
                          "queue"
                        ],
                        "type": "object"
                      },
                      "title": "Queues",
                      "type": "array",
                      "x-eda-nokia-com": {
                        "ui-auto-completes": [
                          {
                            "condition": "true",
                            "group": "qos.eda.nokia.com",
                            "resource": "queues",
                            "type": "gvr",
                            "version": "v1"
                          }
                        ],
                        "ui-column-span": 4
                      }
                    },
                    "slopePolicyWeight": {
                      "default": 0,
                      "description": "The average queue size is calculated using both the previous average and the current queue size: average = (previous average)(1 - 2^(-n)) + (current size)(2^(-n)), where n is a user-configurable weight factor. A higher n gives more importance to the previous average, smoothing peaks and lows in the queue. Lower n makes the average closer to the current queue size. If this leaf is absent, the default value is used.",
                      "maximum": 15,
                      "minimum": 0,
                      "title": "Slope Policy Weight",
                      "type": "integer"
                    },
                    "wredSlopPolicies": {
                      "description": "Slope policy to apply to the set of queues.",
                      "items": {
                        "properties": {
                          "drop": {
                            "default": false,
                            "description": "When set to true, and if the ECN field in the packet indicates that the endpoints are not ECN-capable, and the WRED algorithm determines that the packet should be dropped based on the drop probability, the packet will be dropped",
                            "title": "Drop",
                            "type": "boolean",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "dropProbability": {
                            "default": "All",
                            "enum": [
                              "High",
                              "Medium",
                              "Low",
                              "All"
                            ],
                            "title": "Drop Probability",
                            "type": "string",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "ecn": {
                            "default": false,
                            "description": "When set to true and the queue length is between the thresholds and the ECN field indicates ECN-capable endpoints, the CE bits are set to 1, and the packet is transmitted based on WRED. If false, such packets are discarded.",
                            "title": "ECN",
                            "type": "boolean",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "maxDropProbabilityPercent": {
                            "description": "If the queue depth is between min and max threshold then this the probability with which packets are dropped or marked.",
                            "title": "Max Drop Probability Percent",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "maxThreshold": {
                            "description": "The maximum threshold parameter for a RED-managed queue in bytes. When the average queue length exceeds the max value, all packets are dropped (or marked if ECN is enabled). Mutually exclusive with min-threshold-percent and max-threshold-percent.",
                            "format": "int64",
                            "title": "Max Threshold",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "maxThresholdPercent": {
                            "description": "The maximum threshold parameter for a RED-managed queue in percent. When the average queue length exceeds the max value, all packets are dropped (or marked if ECN is enabled). Mutually exclusive with min-threshold and max-threshold.",
                            "title": "Max Threshold Percent",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "minThreshold": {
                            "description": "The mininum threshold parameter for a RED-managed queue in bytes. When the average queue length is less than min, all packets are admitted to the queue. Mututally exclusive with min-threshold-percent and max-threshold-percent.",
                            "format": "int64",
                            "title": "Min Threshold",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "minThresholdPercent": {
                            "description": "The mininum threshold parameter for a RED-managed queue in percent. When the average queue length is less than min, all packets are admitted to the queue. Mutually exclusive with min-threshold and max-threshold.",
                            "title": "Min Threshold Percent",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "trafficType": {
                            "default": "All",
                            "description": "The traffic type to which the WRED slope applies.",
                            "enum": [
                              "Tcp",
                              "NonTcp",
                              "All"
                            ],
                            "title": "Traffic Type",
                            "type": "string",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          }
                        },
                        "required": [
                          "drop",
                          "dropProbability",
                          "ecn",
                          "trafficType"
                        ],
                        "type": "object"
                      },
                      "title": "Slope Policy",
                      "type": "array",
                      "x-eda-nokia-com": {
                        "ui-column-span": 4
                      }
                    }
                  },
                  "required": [
                    "queues"
                  ],
                  "type": "object"
                },
                "title": "Queue Management",
                "type": "array"
              }
            },
            "title": "Specification",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 30
            }
          },
          "status": {
            "description": "EgressPolicyStatus defines the observed state of EgressPolicy",
            "readOnly": true,
            "title": "Status",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 20
            }
          }
        },
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object"
      },
      "com.nokia.eda.qos.v1.EgressPolicyList": {
        "description": "EgressPolicyList is a list of egresspolicys",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/com.nokia.eda.qos.v1.EgressPolicy"
            },
            "type": "array"
          },
          "kind": {
            "type": "string"
          }
        },
        "required": [
          "apiVersion",
          "kind"
        ],
        "type": "object"
      },
      "com.nokia.eda.qos.v1.EgressPolicy_DeletedResourceEntry": {
        "properties": {
          "commitTime": {
            "format": "date-time",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 50,
              "ui-title": "Commit Time",
              "ui-title-key": "commitTime"
            }
          },
          "hash": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Commit Hash",
              "ui-title-key": "commitHash"
            }
          },
          "name": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 10,
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          },
          "transactionId": {
            "format": "uint64",
            "type": "integer",
            "x-eda-nokia-com": {
              "ui-order-priority": 30,
              "ui-title": "Transaction ID",
              "ui-title-key": "transactionId"
            }
          }
        },
        "type": "object"
      },
      "com.nokia.eda.qos.v1.EgressPolicy_DeletedResources": {
        "items": {
          "$ref": "#/components/schemas/com.nokia.eda.qos.v1.EgressPolicy_DeletedResourceEntry"
        },
        "type": "array"
      },
      "com.nokia.eda.qos.v1.EgressPolicy_metadata": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Annotations",
              "ui-title-key": "annotations"
            }
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-auto-completes": [
                {
                  "condition": "true",
                  "group": "qos.eda.nokia.com",
                  "kind": "EgressPolicy",
                  "type": "label",
                  "version": "v1"
                }
              ],
              "ui-order-priority": 30,
              "ui-title": "Labels",
              "ui-title-key": "labels"
            }
          },
          "name": {
            "maxLength": 253,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 10,
              "ui-pattern-error": "A valid name is made up of one or more components where each component is separated by period characters.  Each component must start and end with a lower case alphanumeric character and the body of the component is made up of zero or more lower case alphanumeric and hyphen characters.",
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          }
        },
        "required": [
          "name",
          "namespace"
        ],
        "type": "object",
        "x-eda-nokia-com": {
          "ui-order-priority": 10,
          "ui-title": "Metadata",
          "ui-title-key": "metadata"
        }
      },
      "com.nokia.eda.qos.v1.ForwardingClass": {
        "description": "ForwardingClass is the Schema for the forwardingclasss API",
        "properties": {
          "apiVersion": {
            "default": "qos.eda.nokia.com/v1",
            "pattern": "^qos\\.eda\\.nokia\\.com/v1$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The apiVersion must be set to qos.eda.nokia.com/v1",
              "ui-visible-if": "false"
            }
          },
          "kind": {
            "default": "ForwardingClass",
            "pattern": "^ForwardingClass$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The kind must be set to ForwardingClass",
              "ui-visible-if": "false"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/com.nokia.eda.qos.v1.ForwardingClass_metadata"
          },
          "spec": {
            "description": "The ForwaringClass is used as a placeholder for to allow multiple other resources to reference the same forwarding class.",
            "title": "Specification",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 30
            }
          },
          "status": {
            "description": "ForwardingClassStatus defines the observed state of ForwardingClass",
            "readOnly": true,
            "title": "Status",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 20
            }
          }
        },
        "required": [
          "apiVersion",
          "kind",
          "metadata"
        ],
        "type": "object"
      },
      "com.nokia.eda.qos.v1.ForwardingClassList": {
        "description": "ForwardingClassList is a list of forwardingclasss",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/com.nokia.eda.qos.v1.ForwardingClass"
            },
            "type": "array"
          },
          "kind": {
            "type": "string"
          }
        },
        "required": [
          "apiVersion",
          "kind"
        ],
        "type": "object"
      },
      "com.nokia.eda.qos.v1.ForwardingClass_DeletedResourceEntry": {
        "properties": {
          "commitTime": {
            "format": "date-time",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 50,
              "ui-title": "Commit Time",
              "ui-title-key": "commitTime"
            }
          },
          "hash": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Commit Hash",
              "ui-title-key": "commitHash"
            }
          },
          "name": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 10,
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          },
          "transactionId": {
            "format": "uint64",
            "type": "integer",
            "x-eda-nokia-com": {
              "ui-order-priority": 30,
              "ui-title": "Transaction ID",
              "ui-title-key": "transactionId"
            }
          }
        },
        "type": "object"
      },
      "com.nokia.eda.qos.v1.ForwardingClass_DeletedResources": {
        "items": {
          "$ref": "#/components/schemas/com.nokia.eda.qos.v1.ForwardingClass_DeletedResourceEntry"
        },
        "type": "array"
      },
      "com.nokia.eda.qos.v1.ForwardingClass_metadata": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Annotations",
              "ui-title-key": "annotations"
            }
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-auto-completes": [
                {
                  "condition": "true",
                  "group": "qos.eda.nokia.com",
                  "kind": "ForwardingClass",
                  "type": "label",
                  "version": "v1"
                }
              ],
              "ui-order-priority": 30,
              "ui-title": "Labels",
              "ui-title-key": "labels"
            }
          },
          "name": {
            "maxLength": 253,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 10,
              "ui-pattern-error": "A valid name is made up of one or more components where each component is separated by period characters.  Each component must start and end with a lower case alphanumeric character and the body of the component is made up of zero or more lower case alphanumeric and hyphen characters.",
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          }
        },
        "required": [
          "name",
          "namespace"
        ],
        "type": "object",
        "x-eda-nokia-com": {
          "ui-order-priority": 10,
          "ui-title": "Metadata",
          "ui-title-key": "metadata"
        }
      },
      "com.nokia.eda.qos.v1.IngressPolicy": {
        "description": "IngressPolicy is the Schema for the ingresspolicys API",
        "properties": {
          "apiVersion": {
            "default": "qos.eda.nokia.com/v1",
            "pattern": "^qos\\.eda\\.nokia\\.com/v1$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The apiVersion must be set to qos.eda.nokia.com/v1",
              "ui-visible-if": "false"
            }
          },
          "kind": {
            "default": "IngressPolicy",
            "pattern": "^IngressPolicy$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The kind must be set to IngressPolicy",
              "ui-visible-if": "false"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/com.nokia.eda.qos.v1.IngressPolicy_metadata"
          },
          "spec": {
            "description": "IngressPolicySpec defines the desired state of IngressPolicy",
            "properties": {
              "classifier": {
                "description": "Classifier manages the configuration of traffic classification policies in a network. It includes various entry types like IPv4, IPv6, Dot1p, and DSCP policies. Each entry specifies how traffic should be classified and what actions should be taken on the matched packets.",
                "properties": {
                  "entries": {
                    "description": "Specifies the list of filter entries, in order.\nA classifier containing multiple entry types may result in multiple classifiers being created on the target node.\nIPV4 and IPV6 entries will create multifield classifier policies.",
                    "items": {
                      "properties": {
                        "dot1pPolicyEntry": {
                          "description": "A Dot1p policy entry - only a single Dot1p entry is allowed per classifier resource.",
                          "properties": {
                            "directToPFCQueue": {
                              "description": "In addition to creating a Dot1p PCP value to Forwarding Class mapping, this will map the PCP values directly to the PFC queue specified in the Forwarding Class to Queue mapping.",
                              "title": "Direct to PFC Queue",
                              "type": "boolean",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 550
                              }
                            },
                            "dropProbabilityLevel": {
                              "default": "Low",
                              "description": "Assign matching packets to the specified drop probability level.",
                              "enum": [
                                "High",
                                "Medium",
                                "Low"
                              ],
                              "title": "Drop Probability Level",
                              "type": "string",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 450
                              }
                            },
                            "forwardingClass": {
                              "description": "Reference to a ForwardingClass resource to which the value is mapped.",
                              "title": "Forwarding Class",
                              "type": "string",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 450
                              }
                            },
                            "pcpValues": {
                              "description": "List of PCP values or ranges used to match packets to classify into Forwarding Classes.",
                              "items": {
                                "properties": {
                                  "rangeEnd": {
                                    "description": "Optional end of PCP range (inclusive) which would start from the Value to the RangeEnd.",
                                    "maximum": 7,
                                    "minimum": 0,
                                    "title": "PCP Range End",
                                    "type": "integer",
                                    "x-eda-nokia-com": {
                                      "ui-column-span": 2
                                    }
                                  },
                                  "value": {
                                    "description": "Single PCP value or start of range.",
                                    "maximum": 7,
                                    "minimum": 0,
                                    "title": "PCP Value",
                                    "type": "integer",
                                    "x-eda-nokia-com": {
                                      "ui-column-span": 2
                                    }
                                  }
                                },
                                "required": [
                                  "value"
                                ],
                                "type": "object"
                              },
                              "minItems": 1,
                              "title": "PCP Values",
                              "type": "array",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 500
                              }
                            }
                          },
                          "required": [
                            "pcpValues"
                          ],
                          "title": "Dot1p Policy Entry",
                          "type": "object",
                          "x-eda-nokia-com": {
                            "ui-order-priority": 300,
                            "ui-presence-toggle": true,
                            "ui-visible-if": "type === \"DOT1P\" || type === \"AUTO\""
                          }
                        },
                        "dscpPolicyEntry": {
                          "description": "A DSCP policy entry - only a single DSCP entry is allowed per classifier resource.",
                          "properties": {
                            "dropProbabilityLevel": {
                              "default": "Low",
                              "description": "Assign matching packets to the specified drop probability level.",
                              "enum": [
                                "High",
                                "Medium",
                                "Low"
                              ],
                              "title": "Drop Probability Level",
                              "type": "string",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 450
                              }
                            },
                            "dscpValues": {
                              "description": "List of DSCP values or ranges used to match packets to classify into Forwarding Classes.",
                              "items": {
                                "properties": {
                                  "rangeEnd": {
                                    "description": "Optional end of DSCP range (inclusive) which would start from the Value to the RangeEnd.",
                                    "maximum": 63,
                                    "minimum": 0,
                                    "title": "DSCP Range End",
                                    "type": "integer",
                                    "x-eda-nokia-com": {
                                      "ui-column-span": 2
                                    }
                                  },
                                  "value": {
                                    "description": "Single DSCP value or start of range.",
                                    "maximum": 63,
                                    "minimum": 0,
                                    "title": "DSCP Value",
                                    "type": "integer",
                                    "x-eda-nokia-com": {
                                      "ui-column-span": 2
                                    }
                                  }
                                },
                                "required": [
                                  "value"
                                ],
                                "type": "object"
                              },
                              "minItems": 1,
                              "title": "DSCP Values",
                              "type": "array",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 600
                              }
                            },
                            "forwardingClass": {
                              "description": "Reference to a ForwardingClass resource to which the value is mapped.",
                              "title": "Forwarding Class",
                              "type": "string",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 450
                              }
                            }
                          },
                          "required": [
                            "dscpValues"
                          ],
                          "title": "DSCP Policy Entry",
                          "type": "object",
                          "x-eda-nokia-com": {
                            "ui-order-priority": 400,
                            "ui-presence-toggle": true,
                            "ui-visible-if": "type === \"DSCP\" || type === \"AUTO\""
                          }
                        },
                        "ipEntry": {
                          "description": "An IPv4 or IPv6 multifield classifier entry.",
                          "properties": {
                            "action": {
                              "description": "An action to take on the matched packets.",
                              "properties": {
                                "dropProbabilityLevel": {
                                  "default": "Low",
                                  "description": "Assign matching packets to the specified drop probability level.",
                                  "enum": [
                                    "High",
                                    "Medium",
                                    "Low"
                                  ],
                                  "title": "Drop Probability Level",
                                  "type": "string",
                                  "x-eda-nokia-com": {
                                    "ui-column-span": 2,
                                    "ui-order-priority": 450
                                  }
                                },
                                "dscpRewriteValue": {
                                  "description": "Rewrite actions associated with packets that match the classifier entry.",
                                  "maximum": 63,
                                  "minimum": 0,
                                  "title": "DSCP Rewrite Value",
                                  "type": "integer",
                                  "x-eda-nokia-com": {
                                    "ui-column-span": 2,
                                    "ui-order-priority": 450
                                  }
                                },
                                "forwardingClass": {
                                  "description": "Reference to a ForwardingClass resource to which the value is mapped.",
                                  "title": "Forwarding Class",
                                  "type": "string",
                                  "x-eda-nokia-com": {
                                    "ui-column-span": 2,
                                    "ui-order-priority": 450
                                  }
                                }
                              },
                              "title": "Action",
                              "type": "object"
                            },
                            "destinationPortName": {
                              "description": "Destination port to match by name.",
                              "enum": [
                                "ACAP",
                                "AFP-TCP",
                                "ARNS",
                                "ASF-RMCP",
                                "ASHARE",
                                "ATALK-RM",
                                "AURP",
                                "AUTH",
                                "BFD",
                                "BFD-ECHO",
                                "BFTP",
                                "BGMP",
                                "BGP",
                                "BOOTPC",
                                "BOOTPS",
                                "CCSO-NS",
                                "CHARGEN",
                                "CISCO-TDP",
                                "CITADEL",
                                "CLEARCASE",
                                "COMMERCE",
                                "COURIER",
                                "DAYTIME",
                                "DHCP-FAILOVER",
                                "DHCPV6-CLIENT",
                                "DHCPV6-SERVER",
                                "DICOM",
                                "DISCARD",
                                "DNSIX",
                                "DOMAIN",
                                "DSP",
                                "ECHO",
                                "EPP",
                                "ESRO",
                                "EXEC",
                                "FINGER",
                                "FTP",
                                "FTP-DATA",
                                "FTPS",
                                "FTPS-DATA",
                                "GODI",
                                "GOPHER",
                                "GTP-C",
                                "GTP-PRIME",
                                "GTP-U",
                                "HA-CLUSTER",
                                "HOSTNAME",
                                "HP-ALARM-MGR",
                                "HTTP",
                                "HTTP-ALT",
                                "HTTP-MGMT",
                                "HTTP-RPC",
                                "HTTPS",
                                "IEEE-MMS-SSL",
                                "IMAP",
                                "IMAP3",
                                "IMAPS",
                                "IPP",
                                "IPSEC",
                                "IPX",
                                "IRC",
                                "IRIS-BEEP",
                                "ISAKMP",
                                "ISAKMP-NAT",
                                "ISCSI",
                                "ISO-TSAP",
                                "KERBEROS",
                                "KERBEROS-ADM",
                                "KLOGIN",
                                "KPASSWD",
                                "KSHELL",
                                "L2TP",
                                "LDAP",
                                "LDAPS",
                                "LDP",
                                "LMP",
                                "LOGIN",
                                "LPD",
                                "LSP-PING",
                                "MAC-SERVER-ADM",
                                "MATIP-A",
                                "MATIP-B",
                                "MICRO-BFD",
                                "MICROSOFT-DS",
                                "MOBILE-IP",
                                "MONITOR",
                                "MPP",
                                "MS-EXCHANGE",
                                "MSDP",
                                "MSP",
                                "MSSQL-M",
                                "MSSQL-S",
                                "MULTIHOP-BFD",
                                "NAS",
                                "NCP",
                                "NETBIOS-DATA",
                                "NETBIOS-NS",
                                "NETBIOS-SS",
                                "NETNEWS",
                                "NETRJS-1",
                                "NETRJS-2",
                                "NETRJS-3",
                                "NETRJS-4",
                                "NETWALL",
                                "NEW-RWHO",
                                "NFS",
                                "NNTP",
                                "NNTPS",
                                "NTP",
                                "ODMR",
                                "OLSR",
                                "OPENVPN",
                                "PIM-AUTO-RP",
                                "PKIX-TIMESTAMP",
                                "POP2",
                                "POP3",
                                "POP3S",
                                "PPTP",
                                "PRINT-SRV",
                                "PTP-EVENT",
                                "PTP-GENERAL",
                                "QMTP",
                                "QOTD",
                                "RADIUS",
                                "RADIUS-ACCT",
                                "REMOTE-MAIL",
                                "REMOTEFS",
                                "REMOTECMD",
                                "RIP",
                                "RJE",
                                "RLP",
                                "RLZDB",
                                "RMC",
                                "RMONITOR",
                                "RPC2PORTMAP",
                                "RSYNC",
                                "RTELNET",
                                "RTSP",
                                "SGMP",
                                "SILC",
                                "SMUX",
                                "SNA-GW",
                                "SNMP",
                                "SNMP-TRAP",
                                "SNPP",
                                "SMTP",
                                "SQL-SVCS",
                                "SQL",
                                "SSH",
                                "SUBMISSION",
                                "SUNRPC",
                                "SVCLOC",
                                "SYSLOG",
                                "SYSTAT",
                                "TACACS",
                                "TALK",
                                "TCPMUX",
                                "TCPNETHASPSRV",
                                "TFTP",
                                "TIME",
                                "TIMED",
                                "UPS",
                                "XDMCP",
                                "XNS-CH",
                                "XNS-MAIL",
                                "XNS-TIME",
                                "Z3950"
                              ],
                              "title": "Destination Port Name",
                              "type": "string",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 450,
                                "ui-single-line-group": "PortName"
                              }
                            },
                            "destinationPortNumber": {
                              "description": "Destination port to match by numerical value.",
                              "maximum": 65535,
                              "minimum": 0,
                              "title": "Destination Port Number",
                              "type": "integer",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 250,
                                "ui-single-line-group": "PortNumbers"
                              }
                            },
                            "destinationPortOperator": {
                              "description": "Operator to use when matching destinationPort, either Equals, GreaterOrEquals, or LessOrEquals.",
                              "enum": [
                                "Equals",
                                "GreaterOrEquals",
                                "LessOrEquals"
                              ],
                              "title": "Destination Port Operator",
                              "type": "string",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-defaults": [
                                  {
                                    "condition": "!ipEntry.destinationPortOperator \u0026\u0026 ((ipEntry.destinationPortNumber || ipEntry.destinationPortName !== '') || ipEntry.tcpFlags !== '')",
                                    "value": "Equals"
                                  },
                                  {
                                    "condition": "ipEntry.destinationPortOperator !== 'Equals' \u0026\u0026 (!ipEntry.destinationPortNumber \u0026\u0026 !ipEntry.destinationPortName \u0026\u0026 !ipEntry.destinationPortNumber)",
                                    "value": ""
                                  }
                                ],
                                "ui-order-priority": 550,
                                "ui-single-line-group": "PortOperator"
                              }
                            },
                            "destinationPortRange": {
                              "description": "Range of destination ports to match, in the format n-m, e.g. 100-200,  The start and end of the range must be port numbers.",
                              "title": "Destination Port Range",
                              "type": "string",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 350,
                                "ui-single-line-group": "PortRange"
                              }
                            },
                            "destinationPrefix": {
                              "description": "Destination prefix to match.",
                              "format": "ip",
                              "title": "Destination Prefix",
                              "type": "string",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 150,
                                "ui-single-line-group": "DestinationSourcePrefix"
                              }
                            },
                            "firstFragment": {
                              "description": "Match the first fragment only.",
                              "title": "First Fragment",
                              "type": "boolean",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 1000,
                                "ui-single-line-group": "Fragment"
                              }
                            },
                            "fragment": {
                              "description": "Match any fragment.",
                              "title": "Fragment",
                              "type": "boolean",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-defaults": [
                                  {
                                    "condition": "ipEntry.firstFragment",
                                    "value": true
                                  }
                                ],
                                "ui-order-priority": 1050,
                                "ui-single-line-group": "Fragment"
                              }
                            },
                            "icmpCode": {
                              "description": "Match a specific ICMP code, as a number between 0-255, e.g. 0.",
                              "items": {
                                "type": "integer"
                              },
                              "maxItems": 255,
                              "title": "ICMP Code",
                              "type": "array",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 800
                              }
                            },
                            "icmpTypeName": {
                              "description": "Match a specific ICMP type by name, e.g. dest-unreachable.",
                              "enum": [
                                "DestUnreachable",
                                "Echo",
                                "EchoReply",
                                "EchoRequest",
                                "McastRtrAdv",
                                "McastRtrSolicit",
                                "McastRtrTerm",
                                "MldDone",
                                "MldQuery",
                                "MldReport",
                                "MldV2",
                                "NeighborAdvertise",
                                "NeighborSolicit",
                                "NodeInfoQuery",
                                "NodeInfoResponse",
                                "PacketTooBig",
                                "ParamProblem",
                                "Redirect",
                                "RouterAdvertise",
                                "RouterRenumber",
                                "RouterSolicit",
                                "SourceQuench",
                                "TimeExceeded",
                                "Timestamp",
                                "TimestampReply"
                              ],
                              "title": "ICMP Type Name",
                              "type": "string",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 700,
                                "ui-single-line-group": "ICMPType"
                              }
                            },
                            "icmpTypeNumber": {
                              "description": "Match a specific ICMP type by number.",
                              "maximum": 255,
                              "minimum": 0,
                              "title": "ICMP Type Number",
                              "type": "integer",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 750,
                                "ui-single-line-group": "ICMPType"
                              }
                            },
                            "protocolName": {
                              "description": "Match a specific IP protocol name (specified in the type field of the IP header).",
                              "enum": [
                                "AH",
                                "EGP",
                                "EIGRP",
                                "ESP",
                                "GGP",
                                "GRE",
                                "ICMP",
                                "ICMP6",
                                "IDRP",
                                "IGMP",
                                "IGP",
                                "IPV4",
                                "IPV6",
                                "IPV6-DEST-OPTS",
                                "IPV6-HOP",
                                "L2TP",
                                "MPLS-IN-IP",
                                "NO-NEXT-HDR",
                                "OSPF",
                                "PIM",
                                "ROHC",
                                "RSVP",
                                "SCTP",
                                "ST",
                                "TCP",
                                "UDP",
                                "VRRP"
                              ],
                              "title": "Protocol Name",
                              "type": "string",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-defaults": [
                                  {
                                    "condition": "!ipEntry.protocolName \u0026\u0026 ((ipEntry.sourcePortNumber || ipEntry.sourcePortRange !== '' || ipEntry.sourcePortName !== '' || ipEntry.destinationPortNumber || ipEntry.destinationPortRange !== '' || ipEntry.destinationPortName !== '') || ipEntry.tcpFlags !== '')",
                                    "value": "TCP"
                                  },
                                  {
                                    "condition": "ipEntry.protocolName === 'TCP' \u0026\u0026 (!ipEntry.sourcePortNumber \u0026\u0026 !ipEntry.sourcePortRange \u0026\u0026 !ipEntry.sourcePortName \u0026\u0026 !ipEntry.destinationPortNumber \u0026\u0026 !ipEntry.destinationPortRange \u0026\u0026 !ipEntry.destinationPortName \u0026\u0026 ipEntry.tcpFlags === '')",
                                    "value": ""
                                  }
                                ],
                                "ui-order-priority": 650,
                                "ui-single-line-group": "ProtocolNumberName"
                              }
                            },
                            "protocolNumber": {
                              "description": "Match a specific IP protocol number (specified in the type field of the IP header).",
                              "maximum": 255,
                              "minimum": 0,
                              "title": "Protocol Number",
                              "type": "integer",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 600,
                                "ui-single-line-group": "ProtocolNumberName"
                              }
                            },
                            "sourcePortName": {
                              "description": "Source port to match by name.",
                              "enum": [
                                "ACAP",
                                "AFP-TCP",
                                "ARNS",
                                "ASF-RMCP",
                                "ASHARE",
                                "ATALK-RM",
                                "AURP",
                                "AUTH",
                                "BFD",
                                "BFD-ECHO",
                                "BFTP",
                                "BGMP",
                                "BGP",
                                "BOOTPC",
                                "BOOTPS",
                                "CCSO-NS",
                                "CHARGEN",
                                "CISCO-TDP",
                                "CITADEL",
                                "CLEARCASE",
                                "COMMERCE",
                                "COURIER",
                                "DAYTIME",
                                "DHCP-FAILOVER",
                                "DHCPV6-CLIENT",
                                "DHCPV6-SERVER",
                                "DICOM",
                                "DISCARD",
                                "DNSIX",
                                "DOMAIN",
                                "DSP",
                                "ECHO",
                                "EPP",
                                "ESRO",
                                "EXEC",
                                "FINGER",
                                "FTP",
                                "FTP-DATA",
                                "FTPS",
                                "FTPS-DATA",
                                "GODI",
                                "GOPHER",
                                "GTP-C",
                                "GTP-PRIME",
                                "GTP-U",
                                "HA-CLUSTER",
                                "HOSTNAME",
                                "HP-ALARM-MGR",
                                "HTTP",
                                "HTTP-ALT",
                                "HTTP-MGMT",
                                "HTTP-RPC",
                                "HTTPS",
                                "IEEE-MMS-SSL",
                                "IMAP",
                                "IMAP3",
                                "IMAPS",
                                "IPP",
                                "IPSEC",
                                "IPX",
                                "IRC",
                                "IRIS-BEEP",
                                "ISAKMP",
                                "ISAKMP-NAT",
                                "ISCSI",
                                "ISO-TSAP",
                                "KERBEROS",
                                "KERBEROS-ADM",
                                "KLOGIN",
                                "KPASSWD",
                                "KSHELL",
                                "L2TP",
                                "LDAP",
                                "LDAPS",
                                "LDP",
                                "LMP",
                                "LOGIN",
                                "LPD",
                                "LSP-PING",
                                "MAC-SERVER-ADM",
                                "MATIP-A",
                                "MATIP-B",
                                "MICRO-BFD",
                                "MICROSOFT-DS",
                                "MOBILE-IP",
                                "MONITOR",
                                "MPP",
                                "MS-EXCHANGE",
                                "MSDP",
                                "MSP",
                                "MSSQL-M",
                                "MSSQL-S",
                                "MULTIHOP-BFD",
                                "NAS",
                                "NCP",
                                "NETBIOS-DATA",
                                "NETBIOS-NS",
                                "NETBIOS-SS",
                                "NETNEWS",
                                "NETRJS-1",
                                "NETRJS-2",
                                "NETRJS-3",
                                "NETRJS-4",
                                "NETWALL",
                                "NEW-RWHO",
                                "NFS",
                                "NNTP",
                                "NNTPS",
                                "NTP",
                                "ODMR",
                                "OLSR",
                                "OPENVPN",
                                "PIM-AUTO-RP",
                                "PKIX-TIMESTAMP",
                                "POP2",
                                "POP3",
                                "POP3S",
                                "PPTP",
                                "PRINT-SRV",
                                "PTP-EVENT",
                                "PTP-GENERAL",
                                "QMTP",
                                "QOTD",
                                "RADIUS",
                                "RADIUS-ACCT",
                                "REMOTE-MAIL",
                                "REMOTEFS",
                                "REMOTECMD",
                                "RIP",
                                "RJE",
                                "RLP",
                                "RLZDB",
                                "RMC",
                                "RMONITOR",
                                "RPC2PORTMAP",
                                "RSYNC",
                                "RTELNET",
                                "RTSP",
                                "SGMP",
                                "SILC",
                                "SMUX",
                                "SNA-GW",
                                "SNMP",
                                "SNMP-TRAP",
                                "SNPP",
                                "SMTP",
                                "SQL-SVCS",
                                "SQL",
                                "SSH",
                                "SUBMISSION",
                                "SUNRPC",
                                "SVCLOC",
                                "SYSLOG",
                                "SYSTAT",
                                "TACACS",
                                "TALK",
                                "TCPMUX",
                                "TCPNETHASPSRV",
                                "TFTP",
                                "TIME",
                                "TIMED",
                                "UPS",
                                "XDMCP",
                                "XNS-CH",
                                "XNS-MAIL",
                                "XNS-TIME",
                                "Z3950"
                              ],
                              "title": "Source Port Name",
                              "type": "string",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 400,
                                "ui-single-line-group": "PortName"
                              }
                            },
                            "sourcePortNumber": {
                              "description": "Source port to match by numerical value.",
                              "maximum": 65535,
                              "minimum": 0,
                              "title": "Source Port Number",
                              "type": "integer",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 200,
                                "ui-single-line-group": "PortNumbers"
                              }
                            },
                            "sourcePortOperator": {
                              "description": "Operator to use when matching sourcePort, either Equals, GreaterOrEquals, or LessOrEquals.",
                              "enum": [
                                "Equals",
                                "GreaterOrEquals",
                                "LessOrEquals"
                              ],
                              "title": "Source Port Operator",
                              "type": "string",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-defaults": [
                                  {
                                    "condition": "!ipEntry.sourcePortOperator \u0026\u0026 ((ipEntry.sourcePortNumber || ipEntry.sourcePortName !== '') || ipEntry.tcpFlags !== '')",
                                    "value": "Equals"
                                  },
                                  {
                                    "condition": "ipEntry.sourcePortOperator === 'Equals' \u0026\u0026 (!ipEntry.sourcePortNumber \u0026\u0026 !ipEntry.sourcePortName \u0026\u0026 !ipEntry.destinationPortNumber)",
                                    "value": ""
                                  }
                                ],
                                "ui-order-priority": 500,
                                "ui-single-line-group": "PortOperator"
                              }
                            },
                            "sourcePortRange": {
                              "description": "Range of source ports to match, in the format n-m, e.g. 100-200.  The start and end of the range must be port numbers.",
                              "title": "Source Port Range",
                              "type": "string",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 300,
                                "ui-single-line-group": "PortRange"
                              }
                            },
                            "sourcePrefix": {
                              "description": "Source prefix to match.",
                              "format": "ip",
                              "title": "Source Prefix",
                              "type": "string",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 100,
                                "ui-single-line-group": "DestinationSourcePrefix"
                              }
                            },
                            "tcpFlags": {
                              "description": "Match TCP flags, usable with !, \u0026, | and the flags RST, SYN, and ACK.",
                              "title": "TCP Flags",
                              "type": "string",
                              "x-eda-nokia-com": {
                                "ui-column-span": 2,
                                "ui-order-priority": 900
                              }
                            }
                          },
                          "required": [
                            "action"
                          ],
                          "title": "IP Entry",
                          "type": "object",
                          "x-eda-nokia-com": {
                            "ui-conditions": [
                              {
                                "condition": "!(ipEntry.firstFragment === true \u0026\u0026 ipEntry.fragment === false)",
                                "errorMsg": "Fragment match must be enabled when First Fragment match is enabled."
                              },
                              {
                                "condition": "!((ipEntry.sourcePortNumber ? 1 : 0) + (ipEntry.sourcePortRange ? 1 : 0) + (ipEntry.sourcePortName ? 1 : 0) \u003e 1)",
                                "errorMsg": "Only one of Source Port Number, Source Port Range or Source Port Name can be set at a time."
                              },
                              {
                                "condition": "!((ipEntry.destinationPortNumber ? 1 : 0) + (ipEntry.destinationPortRange ? 1 : 0) + (ipEntry.destinationPortName ? 1 : 0) \u003e 1)",
                                "errorMsg": "Only one of Destination Port Number, Destination Port Range or Destination Port Name can be set at a time."
                              },
                              {
                                "condition": "!(ipEntry.protocolNumber !== null \u0026\u0026 ipEntry.protocolName !== undefined)",
                                "errorMsg": "Only one of the Protocol Number or Protocol Name can be set at a time."
                              }
                            ],
                            "ui-order-priority": 200,
                            "ui-presence-toggle": true,
                            "ui-visible-if": "type === \"IPV4\" || type === \"IPV6\" || type === \"AUTO\""
                          }
                        },
                        "type": {
                          "default": "AUTO",
                          "description": "Type of the entry which can be IPV4, IPV6, Dot1pPolicy, DSCPPolicy, or Auto.",
                          "enum": [
                            "IPV4",
                            "IPV6",
                            "DOT1P",
                            "DSCP",
                            "AUTO"
                          ],
                          "title": "Type",
                          "type": "string",
                          "x-eda-nokia-com": {
                            "ui-column-span": 2,
                            "ui-order-priority": 100
                          }
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "title": "Entries",
                    "type": "array",
                    "x-eda-nokia-com": {
                      "ui-may-reorder": true
                    }
                  }
                },
                "required": [
                  "entries"
                ],
                "title": "Classifiers",
                "type": "object"
              },
              "forwardingClassToQueueMapping": {
                "description": "Forwarding class to queue mapping policy.",
                "items": {
                  "properties": {
                    "forwardingClasses": {
                      "description": "The forwarding classes to which the mapping applies, these are references to ForwardingClass resources.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "title": "Forwarding Classes",
                      "type": "array",
                      "x-eda-nokia-com": {
                        "ui-auto-completes": [
                          {
                            "condition": "true",
                            "group": "qos.eda.nokia.com",
                            "resource": "forwardingclasss",
                            "type": "gvr",
                            "version": "v1"
                          }
                        ],
                        "ui-column-span": 2
                      }
                    },
                    "queue": {
                      "description": "The queue to which the forwarding classes are mapped, this is a reference to a Queue resource.",
                      "title": "Queue",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-auto-completes": [
                          {
                            "condition": "true",
                            "group": "qos.eda.nokia.com",
                            "resource": "queues",
                            "type": "gvr",
                            "version": "v1"
                          }
                        ],
                        "ui-column-span": 2
                      }
                    }
                  },
                  "required": [
                    "forwardingClasses",
                    "queue"
                  ],
                  "type": "object"
                },
                "title": "Forwarding Class to Queue Mapping",
                "type": "array"
              },
              "policers": {
                "description": "Ordered list of policers where the first policer is evaluated first before proceeding to the next.",
                "items": {
                  "properties": {
                    "committedBurstSize": {
                      "description": "Maximum CIR bucket depth in bytes.",
                      "format": "int32",
                      "maximum": 4294967295,
                      "minimum": 0,
                      "title": "Committed Burst Size",
                      "type": "integer",
                      "x-eda-nokia-com": {
                        "ui-column-span": 2,
                        "ui-order-priority": 300,
                        "ui-single-line-group": "burst"
                      }
                    },
                    "committedRate": {
                      "description": "The committed information rate (CIR) of the policer, defined in kilobits (1024 bits) per second.",
                      "format": "int32",
                      "title": "Committed Rate",
                      "type": "integer",
                      "x-eda-nokia-com": {
                        "ui-column-span": 2,
                        "ui-order-priority": 100,
                        "ui-single-line-group": "committedrate"
                      }
                    },
                    "committedRatePercent": {
                      "description": "The committed information rate (CIR) of the policer, defined as a percentage of the Interface speed on which it is applied.",
                      "maximum": 100,
                      "minimum": 0,
                      "title": "Committed Rate Percentage",
                      "type": "integer",
                      "x-eda-nokia-com": {
                        "ui-column-span": 2,
                        "ui-order-priority": 100,
                        "ui-single-line-group": "committedrate"
                      }
                    },
                    "exceedAction": {
                      "description": "Applies a drop-probability to packets that the policer has determined are exceeding (yellow).",
                      "properties": {
                        "dropProbabilityLevel": {
                          "default": "Medium",
                          "enum": [
                            "High",
                            "Medium",
                            "Low"
                          ],
                          "title": "Drop Probability Level",
                          "type": "string",
                          "x-eda-nokia-com": {
                            "ui-column-span": 2
                          }
                        }
                      },
                      "title": "Exceed Action",
                      "type": "object",
                      "x-eda-nokia-com": {
                        "ui-column-span": 4,
                        "ui-order-priority": 400
                      }
                    },
                    "forwardingClasses": {
                      "description": "The list of forwarding classes with traffic to be sent to the policer.  Unless specified all traffic is matched for this policer.",
                      "items": {
                        "properties": {
                          "forwardingClasses": {
                            "description": "The forwarding class of the packets on which to apply the Policer.  To match all traffic set this to 'ALL'.",
                            "items": {
                              "type": "string"
                            },
                            "title": "Forwarding Class",
                            "type": "array",
                            "x-eda-nokia-com": {
                              "ui-auto-completes": [
                                {
                                  "condition": "true",
                                  "group": "qos.eda.nokia.com",
                                  "resource": "forwardingclasss",
                                  "type": "gvr",
                                  "version": "v1"
                                }
                              ],
                              "ui-column-span": 2,
                              "ui-unique-key": true
                            }
                          },
                          "forwardingTypes": {
                            "default": [
                              "All"
                            ],
                            "items": {
                              "enum": [
                                "Broadcast",
                                "Unicast",
                                "Multicast",
                                "UnknownMulticast",
                                "UnknownUnicast",
                                "All"
                              ],
                              "type": "string"
                            },
                            "title": "Forwarding Type",
                            "type": "array",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          }
                        },
                        "required": [
                          "forwardingTypes"
                        ],
                        "type": "object"
                      },
                      "title": "Forwarding Class",
                      "type": "array",
                      "x-eda-nokia-com": {
                        "ui-column-span": 4,
                        "ui-order-priority": 600
                      }
                    },
                    "maximumBurstSize": {
                      "description": "Maximum PIR bucket depth in bytes.",
                      "format": "int32",
                      "maximum": 4294967295,
                      "minimum": 0,
                      "title": "Maximum Burst Size",
                      "type": "integer",
                      "x-eda-nokia-com": {
                        "ui-column-span": 2,
                        "ui-order-priority": 300,
                        "ui-single-line-group": "burst"
                      }
                    },
                    "minInterfaceSpeed": {
                      "description": "Minimum interface speed (kbps) to calculate PeakRate and CommittedRate for devices where configuration is not supported in percentage.",
                      "format": "int32",
                      "title": "Minimum Interface Speed",
                      "type": "integer",
                      "x-eda-nokia-com": {
                        "ui-column-span": 2,
                        "ui-order-priority": 700
                      }
                    },
                    "peakRate": {
                      "description": "The peak information rate (PIR) of the policer, defined in kilobits (1024 bits) per second.",
                      "format": "int32",
                      "title": "Peak Rate",
                      "type": "integer",
                      "x-eda-nokia-com": {
                        "ui-column-span": 2,
                        "ui-order-priority": 200,
                        "ui-single-line-group": "peakrate"
                      }
                    },
                    "peakRatePercent": {
                      "description": "The peak information rate (PIR) of the policer, defined as a percentage of the Interface speed on which it is applied.",
                      "maximum": 100,
                      "minimum": 0,
                      "title": "Peak Rate Percentage",
                      "type": "integer",
                      "x-eda-nokia-com": {
                        "ui-column-span": 2,
                        "ui-order-priority": 200,
                        "ui-single-line-group": "peakrate"
                      }
                    },
                    "violateAction": {
                      "description": "Applies a drop-probability to packets that the policer has determined are exceeding (red).",
                      "properties": {
                        "dropProbabilityLevel": {
                          "default": "High",
                          "enum": [
                            "High",
                            "Medium",
                            "Low",
                            "All"
                          ],
                          "title": "Drop Probability Level",
                          "type": "string",
                          "x-eda-nokia-com": {
                            "ui-column-span": 2
                          }
                        }
                      },
                      "title": "Violate Action",
                      "type": "object",
                      "x-eda-nokia-com": {
                        "ui-column-span": 4,
                        "ui-order-priority": 500
                      }
                    }
                  },
                  "type": "object"
                },
                "title": "Policers",
                "type": "array"
              },
              "queueManagement": {
                "description": "Queue management policy for egress queues.",
                "items": {
                  "properties": {
                    "pfcReservedBufferPercent": {
                      "description": "Percentage of the linecard buffer reserved for accomodating incoming traffic while upstream node reacts to generated PFC-pause frames. Note: this percentage must be common across all EgressPolicies and QueuesSets used on the same linecard.",
                      "maximum": 100,
                      "minimum": 0,
                      "title": "PFC Reserved Linecard Buffer Percent",
                      "type": "integer",
                      "x-eda-nokia-com": {
                        "ui-column-span": 2
                      }
                    },
                    "queues": {
                      "description": "List of queues.",
                      "items": {
                        "properties": {
                          "committedBurstSize": {
                            "description": "Committed Burst Size.",
                            "format": "int32",
                            "title": "Committed Burst Size",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "maximumBurstSize": {
                            "description": "Maximum amount of shared buffer memory available to the queue in bytes.",
                            "format": "int32",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "title": "Maximum Burst Size",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "pfcOffThreshold": {
                            "description": "PFC off threshold.",
                            "maximum": 100,
                            "minimum": 0,
                            "title": "PFC Off Threshold",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "pfcOnThreshold": {
                            "description": "PFC on threshold.",
                            "maximum": 100,
                            "minimum": 0,
                            "title": "PFC On Threshold",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "pfcPauseFramePriority": {
                            "description": "PFC priorities indicated in generated pfc-pause-frame if congestion occurs in a given pfc-queue.",
                            "title": "PFC Priority",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "pfcReservedShareBufferPercent": {
                            "description": "Maximum level the pfc-queue can take from pfc-reserved buffer configured per given forwarding-complex.",
                            "maximum": 100,
                            "minimum": 0,
                            "title": "PFC Reserved Buffer",
                            "type": "integer",
                            "x-eda-nokia-com": {
                              "ui-column-span": 2
                            }
                          },
                          "queue": {
                            "description": "Reference to a Queue resource.",
                            "title": "Queue",
                            "type": "string",
                            "x-eda-nokia-com": {
                              "ui-auto-completes": [
                                {
                                  "condition": "true",
                                  "group": "qos.eda.nokia.com",
                                  "resource": "queues",
                                  "type": "gvr",
                                  "version": "v1"
                                }
                              ],
                              "ui-column-span": 2
                            }
                          }
                        },
                        "required": [
                          "queue"
                        ],
                        "type": "object"
                      },
                      "title": "Queues",
                      "type": "array"
                    }
                  },
                  "required": [
                    "queues"
                  ],
                  "type": "object"
                },
                "title": "Queue Management",
                "type": "array"
              }
            },
            "title": "Specification",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 30
            }
          },
          "status": {
            "description": "IngressPolicyStatus defines the observed state of IngressPolicy",
            "readOnly": true,
            "title": "Status",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 20
            }
          }
        },
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object"
      },
      "com.nokia.eda.qos.v1.IngressPolicyList": {
        "description": "IngressPolicyList is a list of ingresspolicys",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/com.nokia.eda.qos.v1.IngressPolicy"
            },
            "type": "array"
          },
          "kind": {
            "type": "string"
          }
        },
        "required": [
          "apiVersion",
          "kind"
        ],
        "type": "object"
      },
      "com.nokia.eda.qos.v1.IngressPolicy_DeletedResourceEntry": {
        "properties": {
          "commitTime": {
            "format": "date-time",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 50,
              "ui-title": "Commit Time",
              "ui-title-key": "commitTime"
            }
          },
          "hash": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Commit Hash",
              "ui-title-key": "commitHash"
            }
          },
          "name": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 10,
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          },
          "transactionId": {
            "format": "uint64",
            "type": "integer",
            "x-eda-nokia-com": {
              "ui-order-priority": 30,
              "ui-title": "Transaction ID",
              "ui-title-key": "transactionId"
            }
          }
        },
        "type": "object"
      },
      "com.nokia.eda.qos.v1.IngressPolicy_DeletedResources": {
        "items": {
          "$ref": "#/components/schemas/com.nokia.eda.qos.v1.IngressPolicy_DeletedResourceEntry"
        },
        "type": "array"
      },
      "com.nokia.eda.qos.v1.IngressPolicy_metadata": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Annotations",
              "ui-title-key": "annotations"
            }
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-auto-completes": [
                {
                  "condition": "true",
                  "group": "qos.eda.nokia.com",
                  "kind": "IngressPolicy",
                  "type": "label",
                  "version": "v1"
                }
              ],
              "ui-order-priority": 30,
              "ui-title": "Labels",
              "ui-title-key": "labels"
            }
          },
          "name": {
            "maxLength": 253,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 10,
              "ui-pattern-error": "A valid name is made up of one or more components where each component is separated by period characters.  Each component must start and end with a lower case alphanumeric character and the body of the component is made up of zero or more lower case alphanumeric and hyphen characters.",
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          }
        },
        "required": [
          "name",
          "namespace"
        ],
        "type": "object",
        "x-eda-nokia-com": {
          "ui-order-priority": 10,
          "ui-title": "Metadata",
          "ui-title-key": "metadata"
        }
      },
      "com.nokia.eda.qos.v1.PolicyAttachment": {
        "description": "PolicyAttachment is the Schema for the policyattachments API",
        "properties": {
          "apiVersion": {
            "default": "qos.eda.nokia.com/v1",
            "pattern": "^qos\\.eda\\.nokia\\.com/v1$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The apiVersion must be set to qos.eda.nokia.com/v1",
              "ui-visible-if": "false"
            }
          },
          "kind": {
            "default": "PolicyAttachment",
            "pattern": "^PolicyAttachment$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The kind must be set to PolicyAttachment",
              "ui-visible-if": "false"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyAttachment_metadata"
          },
          "spec": {
            "description": "PolicyAttachmentSpec defines the desired state of PolicyAttachment",
            "properties": {
              "attachments": {
                "description": "Specifies a list of Interfaces and subinterfaces on which to deploy the policies.",
                "items": {
                  "properties": {
                    "interface": {
                      "description": "Specifies the Interface on which to deploy the policies.",
                      "title": "Interface",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-auto-completes": [
                          {
                            "condition": "true",
                            "group": "interfaces.eda.nokia.com",
                            "resource": "interfaces",
                            "type": "gvr",
                            "version": "v1alpha1"
                          }
                        ],
                        "ui-column-span": 2,
                        "ui-order-priority": 200,
                        "ui-single-line-group": "Interfaces"
                      }
                    },
                    "interfaceType": {
                      "description": "Used for platforms that differentiate between access/service interfaces and network interface.  These platforms may require different classifiers depending on whether they are applied on access/service interfaces or network interfaces.  Specifies whether the classifier should be configured as a service Egress classifier or network Egress classifier",
                      "enum": [
                        "ACCESS",
                        "NETWORK"
                      ],
                      "title": "Interface Type",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-column-span": 2,
                        "ui-order-priority": 400
                      }
                    },
                    "subInterfaceIndex": {
                      "description": "Specifies the SubInterfaceIndex on which to deploy the policies.",
                      "title": "SubInterface Index",
                      "type": "integer",
                      "x-eda-nokia-com": {
                        "ui-column-span": 2,
                        "ui-order-priority": 300
                      }
                    }
                  },
                  "type": "object"
                },
                "title": "Interfaces",
                "type": "array",
                "x-eda-nokia-com": {
                  "ui-auto-completes": [
                    {
                      "condition": "true",
                      "group": "interfaces.eda.nokia.com",
                      "resource": "interfaces",
                      "type": "gvr",
                      "version": "v1alpha1"
                    }
                  ],
                  "ui-column-span": 2,
                  "ui-order-priority": 200,
                  "ui-single-line-group": "Interfaces"
                }
              },
              "egressPolicy": {
                "description": "Specifies an EgressPolicy to deploy on the specified Node.",
                "title": "Egress Policy",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-auto-completes": [
                    {
                      "condition": "true",
                      "group": "qos.eda.nokia.com",
                      "resource": "egresspolicys",
                      "type": "gvr",
                      "version": "v1"
                    }
                  ],
                  "ui-column-span": 2,
                  "ui-order-priority": 400,
                  "ui-single-line-group": "Policies"
                }
              },
              "ingressPolicy": {
                "description": "Specifies the IngressPolicy to deploy on the specified Node.",
                "title": "Ingress Policy",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-auto-completes": [
                    {
                      "condition": "true",
                      "group": "qos.eda.nokia.com",
                      "resource": "ingresspolicys",
                      "type": "gvr",
                      "version": "v1"
                    }
                  ],
                  "ui-column-span": 2,
                  "ui-order-priority": 400,
                  "ui-single-line-group": "Policies"
                }
              }
            },
            "required": [
              "attachments"
            ],
            "title": "Specification",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 30
            }
          },
          "status": {
            "description": "PolicyAttachmentStatus defines the observed state of PolicyAttachment",
            "readOnly": true,
            "title": "Status",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 20
            }
          }
        },
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object"
      },
      "com.nokia.eda.qos.v1.PolicyAttachmentList": {
        "description": "PolicyAttachmentList is a list of policyattachments",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyAttachment"
            },
            "type": "array"
          },
          "kind": {
            "type": "string"
          }
        },
        "required": [
          "apiVersion",
          "kind"
        ],
        "type": "object"
      },
      "com.nokia.eda.qos.v1.PolicyAttachment_DeletedResourceEntry": {
        "properties": {
          "commitTime": {
            "format": "date-time",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 50,
              "ui-title": "Commit Time",
              "ui-title-key": "commitTime"
            }
          },
          "hash": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Commit Hash",
              "ui-title-key": "commitHash"
            }
          },
          "name": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 10,
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          },
          "transactionId": {
            "format": "uint64",
            "type": "integer",
            "x-eda-nokia-com": {
              "ui-order-priority": 30,
              "ui-title": "Transaction ID",
              "ui-title-key": "transactionId"
            }
          }
        },
        "type": "object"
      },
      "com.nokia.eda.qos.v1.PolicyAttachment_DeletedResources": {
        "items": {
          "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyAttachment_DeletedResourceEntry"
        },
        "type": "array"
      },
      "com.nokia.eda.qos.v1.PolicyAttachment_metadata": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Annotations",
              "ui-title-key": "annotations"
            }
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-auto-completes": [
                {
                  "condition": "true",
                  "group": "qos.eda.nokia.com",
                  "kind": "PolicyAttachment",
                  "type": "label",
                  "version": "v1"
                }
              ],
              "ui-order-priority": 30,
              "ui-title": "Labels",
              "ui-title-key": "labels"
            }
          },
          "name": {
            "maxLength": 253,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 10,
              "ui-pattern-error": "A valid name is made up of one or more components where each component is separated by period characters.  Each component must start and end with a lower case alphanumeric character and the body of the component is made up of zero or more lower case alphanumeric and hyphen characters.",
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          }
        },
        "required": [
          "name",
          "namespace"
        ],
        "type": "object",
        "x-eda-nokia-com": {
          "ui-order-priority": 10,
          "ui-title": "Metadata",
          "ui-title-key": "metadata"
        }
      },
      "com.nokia.eda.qos.v1.PolicyDeployment": {
        "description": "PolicyDeployment is the Schema for the policydeployments API",
        "properties": {
          "apiVersion": {
            "default": "qos.eda.nokia.com/v1",
            "pattern": "^qos\\.eda\\.nokia\\.com/v1$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The apiVersion must be set to qos.eda.nokia.com/v1",
              "ui-visible-if": "false"
            }
          },
          "kind": {
            "default": "PolicyDeployment",
            "pattern": "^PolicyDeployment$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The kind must be set to PolicyDeployment",
              "ui-visible-if": "false"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyDeployment_metadata"
          },
          "spec": {
            "description": "PolicyDeploymentSpec defines the desired state of PolicyDeployment",
            "properties": {
              "egressPolicy": {
                "description": "Specifies an EgressPolicy to deploy on the specified Node.",
                "title": "Egress Policy",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-auto-completes": [
                    {
                      "condition": "true",
                      "group": "qos.eda.nokia.com",
                      "resource": "egresspolicys",
                      "type": "gvr",
                      "version": "v1"
                    }
                  ],
                  "ui-column-span": 2,
                  "ui-order-priority": 400,
                  "ui-single-line-group": "Policies"
                }
              },
              "ingressPolicy": {
                "description": "Specifies the IngressPolicy to deploy on the specified Node.",
                "title": "Ingress Policy",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-auto-completes": [
                    {
                      "condition": "true",
                      "group": "qos.eda.nokia.com",
                      "resource": "ingresspolicys",
                      "type": "gvr",
                      "version": "v1"
                    }
                  ],
                  "ui-column-span": 2,
                  "ui-order-priority": 400,
                  "ui-single-line-group": "Policies"
                }
              },
              "interfaceSelector": {
                "description": "Specifies a label selector to filter the interfaces on which to deploy the policies.",
                "format": "labelselector",
                "items": {
                  "type": "string"
                },
                "title": "Interface Selector",
                "type": "array",
                "x-eda-nokia-com": {
                  "ui-column-span": 2,
                  "ui-order-priority": 200,
                  "ui-single-line-group": "Interfaces"
                }
              },
              "interfaceType": {
                "description": "Used for platforms that differentiate between access/service interfaces and network interface.  These platforms may require different classifiers depending on whether they are applied on access/service interfaces or network interfaces.  Specifies whether the classifier should be configured as a service Egress classifier or network Egress classifier",
                "enum": [
                  "ACCESS",
                  "NETWORK"
                ],
                "title": "Interface Type",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-column-span": 2,
                  "ui-order-priority": 300
                }
              },
              "interfaces": {
                "description": "Specifies a list of Interfaces on which to deploy the policies.",
                "items": {
                  "type": "string"
                },
                "title": "Interfaces",
                "type": "array",
                "x-eda-nokia-com": {
                  "ui-auto-completes": [
                    {
                      "condition": "true",
                      "group": "interfaces.eda.nokia.com",
                      "resource": "interfaces",
                      "type": "gvr",
                      "version": "v1alpha1"
                    }
                  ],
                  "ui-column-span": 2,
                  "ui-order-priority": 200,
                  "ui-single-line-group": "Interfaces"
                }
              },
              "node": {
                "description": "Specifies a Node to deploy the policies on.",
                "title": "Node",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-auto-completes": [
                    {
                      "condition": "true",
                      "group": "core.eda.nokia.com",
                      "resource": "toponodes",
                      "type": "gvr",
                      "version": "v1"
                    }
                  ],
                  "ui-column-span": 2,
                  "ui-order-priority": 100,
                  "ui-single-line-group": "Nodes"
                }
              },
              "nodeSelector": {
                "description": "Specifies a label selector to filter the nodes on which to deploy the policies.",
                "format": "labelselector",
                "items": {
                  "type": "string"
                },
                "title": "Node Selector",
                "type": "array",
                "x-eda-nokia-com": {
                  "ui-column-span": 2,
                  "ui-order-priority": 100,
                  "ui-single-line-group": "Nodes"
                }
              }
            },
            "title": "Specification",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 30
            }
          },
          "status": {
            "description": "PolicyDeploymentStatus defines the observed state of PolicyDeployment",
            "readOnly": true,
            "title": "Status",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 20
            }
          }
        },
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object"
      },
      "com.nokia.eda.qos.v1.PolicyDeploymentList": {
        "description": "PolicyDeploymentList is a list of policydeployments",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyDeployment"
            },
            "type": "array"
          },
          "kind": {
            "type": "string"
          }
        },
        "required": [
          "apiVersion",
          "kind"
        ],
        "type": "object"
      },
      "com.nokia.eda.qos.v1.PolicyDeployment_DeletedResourceEntry": {
        "properties": {
          "commitTime": {
            "format": "date-time",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 50,
              "ui-title": "Commit Time",
              "ui-title-key": "commitTime"
            }
          },
          "hash": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Commit Hash",
              "ui-title-key": "commitHash"
            }
          },
          "name": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 10,
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          },
          "transactionId": {
            "format": "uint64",
            "type": "integer",
            "x-eda-nokia-com": {
              "ui-order-priority": 30,
              "ui-title": "Transaction ID",
              "ui-title-key": "transactionId"
            }
          }
        },
        "type": "object"
      },
      "com.nokia.eda.qos.v1.PolicyDeployment_DeletedResources": {
        "items": {
          "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyDeployment_DeletedResourceEntry"
        },
        "type": "array"
      },
      "com.nokia.eda.qos.v1.PolicyDeployment_metadata": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Annotations",
              "ui-title-key": "annotations"
            }
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-auto-completes": [
                {
                  "condition": "true",
                  "group": "qos.eda.nokia.com",
                  "kind": "PolicyDeployment",
                  "type": "label",
                  "version": "v1"
                }
              ],
              "ui-order-priority": 30,
              "ui-title": "Labels",
              "ui-title-key": "labels"
            }
          },
          "name": {
            "maxLength": 253,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 10,
              "ui-pattern-error": "A valid name is made up of one or more components where each component is separated by period characters.  Each component must start and end with a lower case alphanumeric character and the body of the component is made up of zero or more lower case alphanumeric and hyphen characters.",
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          }
        },
        "required": [
          "name",
          "namespace"
        ],
        "type": "object",
        "x-eda-nokia-com": {
          "ui-order-priority": 10,
          "ui-title": "Metadata",
          "ui-title-key": "metadata"
        }
      },
      "com.nokia.eda.qos.v1.Queue": {
        "description": "Queue is the Schema for the queues API",
        "properties": {
          "apiVersion": {
            "default": "qos.eda.nokia.com/v1",
            "pattern": "^qos\\.eda\\.nokia\\.com/v1$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The apiVersion must be set to qos.eda.nokia.com/v1",
              "ui-visible-if": "false"
            }
          },
          "kind": {
            "default": "Queue",
            "pattern": "^Queue$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The kind must be set to Queue",
              "ui-visible-if": "false"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/com.nokia.eda.qos.v1.Queue_metadata"
          },
          "spec": {
            "description": "The Queue resource is used to define the properties of a queue, which can then be referenced by other resources.",
            "properties": {
              "queueID": {
                "description": "The ID of the queue on which to apply the properties.  This is mandatory for usage of queus on SROS and is ignored on other operating systems.",
                "title": "Queue ID",
                "type": "integer",
                "x-eda-nokia-com": {
                  "ui-column-span": 2,
                  "ui-order-priority": 300
                }
              },
              "queueType": {
                "description": "QueueType specifies whether this is a normal queue or a PFC queue",
                "enum": [
                  "Normal",
                  "Pfc"
                ],
                "title": "Queue Type",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-column-span": 2,
                  "ui-order-priority": 100
                }
              },
              "trafficType": {
                "description": "The traffic type of the queue, either unicast or multicast.",
                "enum": [
                  "Unicast",
                  "Multicast"
                ],
                "title": "Traffic Type",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-column-span": 2,
                  "ui-order-priority": 200
                }
              }
            },
            "required": [
              "queueType",
              "trafficType"
            ],
            "title": "Specification",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 30
            }
          },
          "status": {
            "description": "QueueStatus defines the observed state of Queue",
            "readOnly": true,
            "title": "Status",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 20
            }
          }
        },
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object"
      },
      "com.nokia.eda.qos.v1.QueueList": {
        "description": "QueueList is a list of queues",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/com.nokia.eda.qos.v1.Queue"
            },
            "type": "array"
          },
          "kind": {
            "type": "string"
          }
        },
        "required": [
          "apiVersion",
          "kind"
        ],
        "type": "object"
      },
      "com.nokia.eda.qos.v1.Queue_DeletedResourceEntry": {
        "properties": {
          "commitTime": {
            "format": "date-time",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 50,
              "ui-title": "Commit Time",
              "ui-title-key": "commitTime"
            }
          },
          "hash": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Commit Hash",
              "ui-title-key": "commitHash"
            }
          },
          "name": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 10,
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          },
          "transactionId": {
            "format": "uint64",
            "type": "integer",
            "x-eda-nokia-com": {
              "ui-order-priority": 30,
              "ui-title": "Transaction ID",
              "ui-title-key": "transactionId"
            }
          }
        },
        "type": "object"
      },
      "com.nokia.eda.qos.v1.Queue_DeletedResources": {
        "items": {
          "$ref": "#/components/schemas/com.nokia.eda.qos.v1.Queue_DeletedResourceEntry"
        },
        "type": "array"
      },
      "com.nokia.eda.qos.v1.Queue_metadata": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Annotations",
              "ui-title-key": "annotations"
            }
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-auto-completes": [
                {
                  "condition": "true",
                  "group": "qos.eda.nokia.com",
                  "kind": "Queue",
                  "type": "label",
                  "version": "v1"
                }
              ],
              "ui-order-priority": 30,
              "ui-title": "Labels",
              "ui-title-key": "labels"
            }
          },
          "name": {
            "maxLength": 253,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 10,
              "ui-pattern-error": "A valid name is made up of one or more components where each component is separated by period characters.  Each component must start and end with a lower case alphanumeric character and the body of the component is made up of zero or more lower case alphanumeric and hyphen characters.",
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          }
        },
        "required": [
          "name",
          "namespace"
        ],
        "type": "object",
        "x-eda-nokia-com": {
          "ui-order-priority": 10,
          "ui-title": "Metadata",
          "ui-title-key": "metadata"
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "title": "QoS Application APIs.",
    "version": "v1"
  },
  "openapi": "3.0.1",
  "paths": {
    "/apps/qos.eda.nokia.com": {
      "get": {
        "description": "list versions available from qos.eda.nokia.com",
        "operationId": "getVersionQosEdaNokiaCom",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppGroup"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1": {
      "get": {
        "description": "list resources available from qos.eda.nokia.com/v1",
        "operationId": "getResourcesQosEdaNokiaComV1",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/_ui/{pathname}": {
      "get": {
        "description": "get UI specification for qos.eda.nokia.com v1",
        "operationId": "uiQosEdaNokiaComV1",
        "parameters": [
          {
            "description": "pathname to the UI specification to retrieve",
            "in": "path",
            "name": "pathname",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UIResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/egresspolicys": {
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listQosEdaNokiaComV1Egresspolicys",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.EgressPolicyList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list egresspolicys",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/forwardingclasss": {
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listQosEdaNokiaComV1Forwardingclasss",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.ForwardingClassList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list forwardingclasss",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/ingresspolicys": {
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listQosEdaNokiaComV1Ingresspolicys",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.IngressPolicyList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list ingresspolicys",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/egresspolicys": {
      "delete": {
        "operationId": "deleteAllQosEdaNokiaComV1NamespaceEgresspolicys",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the set of CRs deleted based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.EgressPolicyList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Delete all instances of EgressPolicy in the specified namespace.",
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listQosEdaNokiaComV1NamespaceEgresspolicys",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.EgressPolicyList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list egresspolicys in namespace",
        "tags": [
          "apps"
        ]
      },
      "post": {
        "description": "create a EgressPolicy",
        "operationId": "createQosEdaNokiaComV1NamespaceEgresspolicys",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.qos.v1.EgressPolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.EgressPolicy"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/egresspolicys/_deleted": {
      "get": {
        "operationId": "getDeletedQosEdaNokiaComV1NamespaceEgresspolicys",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.EgressPolicy_DeletedResources"
                }
              }
            },
            "description": "Returns list of deleted resource entries"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get information about the instances of EgressPolicy that have been deleted that existed in the specified namespace.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/egresspolicys/{name}": {
      "delete": {
        "description": "delete the specified EgressPolicy",
        "operationId": "deleteQosEdaNokiaComV1NamespaceEgresspolicys",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of the EgressPolicy to delete",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "read the specified EgressPolicy.  If a git hash query parameter\nis supplied, the resource as it existed at the time of the git hash\nwill be returned. Streaming is not supported when a particular revision\nis asked for.",
        "operationId": "readQosEdaNokiaComV1NamespaceEgresspolicys",
        "parameters": [
          {
            "description": "name of the EgressPolicy",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "resource content will be returned as it was at the time of this git hash",
            "in": "query",
            "name": "hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.EgressPolicy"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "patch": {
        "description": "patch a EgressPolicy",
        "operationId": "patchQosEdaNokiaComV1NamespaceEgresspolicys",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.EgressPolicy"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "put": {
        "description": "replace a EgressPolicy",
        "operationId": "replaceQosEdaNokiaComV1NamespaceEgresspolicys",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.qos.v1.EgressPolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.EgressPolicy"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/egresspolicys/{name}/_revs": {
      "get": {
        "operationId": "getHistoryQosEdaNokiaComV1NamespaceEgresspolicys",
        "parameters": [
          {
            "description": "name of the EgressPolicy to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum number of history entries to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "uint64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceHistory"
                }
              }
            },
            "description": "Returns the change history of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get revision history for the specified namespaced EgressPolicy.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/egresspolicys/{name}/_topology": {
      "get": {
        "operationId": "getTopologyQosEdaNokiaComV1NamespaceEgresspolicys",
        "parameters": [
          {
            "description": "name of the EgressPolicy to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the type of topology to retrieve",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "childrenAndParents",
              "enum": [
                "children",
                "parents",
                "childrenAndParents",
                "dependentCrs"
              ],
              "type": "string"
            }
          },
          {
            "description": "whether to recursively build the topology to include all layers or just a single layer of the topology",
            "in": "query",
            "name": "recurse",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceTopology"
                }
              }
            },
            "description": "Returns the topology of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get the topology for the specified namespaced EgressPolicy.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/forwardingclasss": {
      "delete": {
        "operationId": "deleteAllQosEdaNokiaComV1NamespaceForwardingclasss",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the set of CRs deleted based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.ForwardingClassList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Delete all instances of ForwardingClass in the specified namespace.",
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listQosEdaNokiaComV1NamespaceForwardingclasss",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.ForwardingClassList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list forwardingclasss in namespace",
        "tags": [
          "apps"
        ]
      },
      "post": {
        "description": "create a ForwardingClass",
        "operationId": "createQosEdaNokiaComV1NamespaceForwardingclasss",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.qos.v1.ForwardingClass"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.ForwardingClass"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/forwardingclasss/_deleted": {
      "get": {
        "operationId": "getDeletedQosEdaNokiaComV1NamespaceForwardingclasss",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.ForwardingClass_DeletedResources"
                }
              }
            },
            "description": "Returns list of deleted resource entries"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get information about the instances of ForwardingClass that have been deleted that existed in the specified namespace.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/forwardingclasss/{name}": {
      "delete": {
        "description": "delete the specified ForwardingClass",
        "operationId": "deleteQosEdaNokiaComV1NamespaceForwardingclasss",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of the ForwardingClass to delete",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "read the specified ForwardingClass.  If a git hash query parameter\nis supplied, the resource as it existed at the time of the git hash\nwill be returned. Streaming is not supported when a particular revision\nis asked for.",
        "operationId": "readQosEdaNokiaComV1NamespaceForwardingclasss",
        "parameters": [
          {
            "description": "name of the ForwardingClass",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "resource content will be returned as it was at the time of this git hash",
            "in": "query",
            "name": "hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.ForwardingClass"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "patch": {
        "description": "patch a ForwardingClass",
        "operationId": "patchQosEdaNokiaComV1NamespaceForwardingclasss",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.ForwardingClass"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "put": {
        "description": "replace a ForwardingClass",
        "operationId": "replaceQosEdaNokiaComV1NamespaceForwardingclasss",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.qos.v1.ForwardingClass"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.ForwardingClass"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/forwardingclasss/{name}/_revs": {
      "get": {
        "operationId": "getHistoryQosEdaNokiaComV1NamespaceForwardingclasss",
        "parameters": [
          {
            "description": "name of the ForwardingClass to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum number of history entries to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "uint64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceHistory"
                }
              }
            },
            "description": "Returns the change history of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get revision history for the specified namespaced ForwardingClass.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/forwardingclasss/{name}/_topology": {
      "get": {
        "operationId": "getTopologyQosEdaNokiaComV1NamespaceForwardingclasss",
        "parameters": [
          {
            "description": "name of the ForwardingClass to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the type of topology to retrieve",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "childrenAndParents",
              "enum": [
                "children",
                "parents",
                "childrenAndParents",
                "dependentCrs"
              ],
              "type": "string"
            }
          },
          {
            "description": "whether to recursively build the topology to include all layers or just a single layer of the topology",
            "in": "query",
            "name": "recurse",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceTopology"
                }
              }
            },
            "description": "Returns the topology of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get the topology for the specified namespaced ForwardingClass.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/ingresspolicys": {
      "delete": {
        "operationId": "deleteAllQosEdaNokiaComV1NamespaceIngresspolicys",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the set of CRs deleted based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.IngressPolicyList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Delete all instances of IngressPolicy in the specified namespace.",
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listQosEdaNokiaComV1NamespaceIngresspolicys",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.IngressPolicyList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list ingresspolicys in namespace",
        "tags": [
          "apps"
        ]
      },
      "post": {
        "description": "create a IngressPolicy",
        "operationId": "createQosEdaNokiaComV1NamespaceIngresspolicys",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.qos.v1.IngressPolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.IngressPolicy"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/ingresspolicys/_deleted": {
      "get": {
        "operationId": "getDeletedQosEdaNokiaComV1NamespaceIngresspolicys",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.IngressPolicy_DeletedResources"
                }
              }
            },
            "description": "Returns list of deleted resource entries"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get information about the instances of IngressPolicy that have been deleted that existed in the specified namespace.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/ingresspolicys/{name}": {
      "delete": {
        "description": "delete the specified IngressPolicy",
        "operationId": "deleteQosEdaNokiaComV1NamespaceIngresspolicys",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of the IngressPolicy to delete",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "read the specified IngressPolicy.  If a git hash query parameter\nis supplied, the resource as it existed at the time of the git hash\nwill be returned. Streaming is not supported when a particular revision\nis asked for.",
        "operationId": "readQosEdaNokiaComV1NamespaceIngresspolicys",
        "parameters": [
          {
            "description": "name of the IngressPolicy",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "resource content will be returned as it was at the time of this git hash",
            "in": "query",
            "name": "hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.IngressPolicy"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "patch": {
        "description": "patch a IngressPolicy",
        "operationId": "patchQosEdaNokiaComV1NamespaceIngresspolicys",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.IngressPolicy"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "put": {
        "description": "replace a IngressPolicy",
        "operationId": "replaceQosEdaNokiaComV1NamespaceIngresspolicys",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.qos.v1.IngressPolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.IngressPolicy"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/ingresspolicys/{name}/_revs": {
      "get": {
        "operationId": "getHistoryQosEdaNokiaComV1NamespaceIngresspolicys",
        "parameters": [
          {
            "description": "name of the IngressPolicy to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum number of history entries to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "uint64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceHistory"
                }
              }
            },
            "description": "Returns the change history of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get revision history for the specified namespaced IngressPolicy.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/ingresspolicys/{name}/_topology": {
      "get": {
        "operationId": "getTopologyQosEdaNokiaComV1NamespaceIngresspolicys",
        "parameters": [
          {
            "description": "name of the IngressPolicy to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the type of topology to retrieve",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "childrenAndParents",
              "enum": [
                "children",
                "parents",
                "childrenAndParents",
                "dependentCrs"
              ],
              "type": "string"
            }
          },
          {
            "description": "whether to recursively build the topology to include all layers or just a single layer of the topology",
            "in": "query",
            "name": "recurse",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceTopology"
                }
              }
            },
            "description": "Returns the topology of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get the topology for the specified namespaced IngressPolicy.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/policyattachments": {
      "delete": {
        "operationId": "deleteAllQosEdaNokiaComV1NamespacePolicyattachments",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the set of CRs deleted based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyAttachmentList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Delete all instances of PolicyAttachment in the specified namespace.",
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listQosEdaNokiaComV1NamespacePolicyattachments",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyAttachmentList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list policyattachments in namespace",
        "tags": [
          "apps"
        ]
      },
      "post": {
        "description": "create a PolicyAttachment",
        "operationId": "createQosEdaNokiaComV1NamespacePolicyattachments",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyAttachment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyAttachment"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/policyattachments/_deleted": {
      "get": {
        "operationId": "getDeletedQosEdaNokiaComV1NamespacePolicyattachments",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyAttachment_DeletedResources"
                }
              }
            },
            "description": "Returns list of deleted resource entries"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get information about the instances of PolicyAttachment that have been deleted that existed in the specified namespace.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/policyattachments/{name}": {
      "delete": {
        "description": "delete the specified PolicyAttachment",
        "operationId": "deleteQosEdaNokiaComV1NamespacePolicyattachments",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of the PolicyAttachment to delete",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "read the specified PolicyAttachment.  If a git hash query parameter\nis supplied, the resource as it existed at the time of the git hash\nwill be returned. Streaming is not supported when a particular revision\nis asked for.",
        "operationId": "readQosEdaNokiaComV1NamespacePolicyattachments",
        "parameters": [
          {
            "description": "name of the PolicyAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "resource content will be returned as it was at the time of this git hash",
            "in": "query",
            "name": "hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyAttachment"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "patch": {
        "description": "patch a PolicyAttachment",
        "operationId": "patchQosEdaNokiaComV1NamespacePolicyattachments",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyAttachment"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "put": {
        "description": "replace a PolicyAttachment",
        "operationId": "replaceQosEdaNokiaComV1NamespacePolicyattachments",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyAttachment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyAttachment"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/policyattachments/{name}/_revs": {
      "get": {
        "operationId": "getHistoryQosEdaNokiaComV1NamespacePolicyattachments",
        "parameters": [
          {
            "description": "name of the PolicyAttachment to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum number of history entries to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "uint64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceHistory"
                }
              }
            },
            "description": "Returns the change history of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get revision history for the specified namespaced PolicyAttachment.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/policyattachments/{name}/_topology": {
      "get": {
        "operationId": "getTopologyQosEdaNokiaComV1NamespacePolicyattachments",
        "parameters": [
          {
            "description": "name of the PolicyAttachment to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the type of topology to retrieve",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "childrenAndParents",
              "enum": [
                "children",
                "parents",
                "childrenAndParents",
                "dependentCrs"
              ],
              "type": "string"
            }
          },
          {
            "description": "whether to recursively build the topology to include all layers or just a single layer of the topology",
            "in": "query",
            "name": "recurse",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceTopology"
                }
              }
            },
            "description": "Returns the topology of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get the topology for the specified namespaced PolicyAttachment.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/policydeployments": {
      "delete": {
        "operationId": "deleteAllQosEdaNokiaComV1NamespacePolicydeployments",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the set of CRs deleted based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyDeploymentList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Delete all instances of PolicyDeployment in the specified namespace.",
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listQosEdaNokiaComV1NamespacePolicydeployments",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyDeploymentList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list policydeployments in namespace",
        "tags": [
          "apps"
        ]
      },
      "post": {
        "description": "create a PolicyDeployment",
        "operationId": "createQosEdaNokiaComV1NamespacePolicydeployments",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyDeployment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyDeployment"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/policydeployments/_deleted": {
      "get": {
        "operationId": "getDeletedQosEdaNokiaComV1NamespacePolicydeployments",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyDeployment_DeletedResources"
                }
              }
            },
            "description": "Returns list of deleted resource entries"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get information about the instances of PolicyDeployment that have been deleted that existed in the specified namespace.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/policydeployments/{name}": {
      "delete": {
        "description": "delete the specified PolicyDeployment",
        "operationId": "deleteQosEdaNokiaComV1NamespacePolicydeployments",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of the PolicyDeployment to delete",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "read the specified PolicyDeployment.  If a git hash query parameter\nis supplied, the resource as it existed at the time of the git hash\nwill be returned. Streaming is not supported when a particular revision\nis asked for.",
        "operationId": "readQosEdaNokiaComV1NamespacePolicydeployments",
        "parameters": [
          {
            "description": "name of the PolicyDeployment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "resource content will be returned as it was at the time of this git hash",
            "in": "query",
            "name": "hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyDeployment"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "patch": {
        "description": "patch a PolicyDeployment",
        "operationId": "patchQosEdaNokiaComV1NamespacePolicydeployments",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyDeployment"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "put": {
        "description": "replace a PolicyDeployment",
        "operationId": "replaceQosEdaNokiaComV1NamespacePolicydeployments",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyDeployment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyDeployment"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/policydeployments/{name}/_revs": {
      "get": {
        "operationId": "getHistoryQosEdaNokiaComV1NamespacePolicydeployments",
        "parameters": [
          {
            "description": "name of the PolicyDeployment to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum number of history entries to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "uint64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceHistory"
                }
              }
            },
            "description": "Returns the change history of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get revision history for the specified namespaced PolicyDeployment.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/policydeployments/{name}/_topology": {
      "get": {
        "operationId": "getTopologyQosEdaNokiaComV1NamespacePolicydeployments",
        "parameters": [
          {
            "description": "name of the PolicyDeployment to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the type of topology to retrieve",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "childrenAndParents",
              "enum": [
                "children",
                "parents",
                "childrenAndParents",
                "dependentCrs"
              ],
              "type": "string"
            }
          },
          {
            "description": "whether to recursively build the topology to include all layers or just a single layer of the topology",
            "in": "query",
            "name": "recurse",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceTopology"
                }
              }
            },
            "description": "Returns the topology of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get the topology for the specified namespaced PolicyDeployment.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/queues": {
      "delete": {
        "operationId": "deleteAllQosEdaNokiaComV1NamespaceQueues",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the set of CRs deleted based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.QueueList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Delete all instances of Queue in the specified namespace.",
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listQosEdaNokiaComV1NamespaceQueues",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.QueueList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list queues in namespace",
        "tags": [
          "apps"
        ]
      },
      "post": {
        "description": "create a Queue",
        "operationId": "createQosEdaNokiaComV1NamespaceQueues",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.qos.v1.Queue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.Queue"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/queues/_deleted": {
      "get": {
        "operationId": "getDeletedQosEdaNokiaComV1NamespaceQueues",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.Queue_DeletedResources"
                }
              }
            },
            "description": "Returns list of deleted resource entries"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get information about the instances of Queue that have been deleted that existed in the specified namespace.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/queues/{name}": {
      "delete": {
        "description": "delete the specified Queue",
        "operationId": "deleteQosEdaNokiaComV1NamespaceQueues",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of the Queue to delete",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "read the specified Queue.  If a git hash query parameter\nis supplied, the resource as it existed at the time of the git hash\nwill be returned. Streaming is not supported when a particular revision\nis asked for.",
        "operationId": "readQosEdaNokiaComV1NamespaceQueues",
        "parameters": [
          {
            "description": "name of the Queue",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "resource content will be returned as it was at the time of this git hash",
            "in": "query",
            "name": "hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.Queue"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "patch": {
        "description": "patch a Queue",
        "operationId": "patchQosEdaNokiaComV1NamespaceQueues",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.Queue"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "put": {
        "description": "replace a Queue",
        "operationId": "replaceQosEdaNokiaComV1NamespaceQueues",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.qos.v1.Queue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.Queue"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/queues/{name}/_revs": {
      "get": {
        "operationId": "getHistoryQosEdaNokiaComV1NamespaceQueues",
        "parameters": [
          {
            "description": "name of the Queue to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum number of history entries to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "uint64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceHistory"
                }
              }
            },
            "description": "Returns the change history of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get revision history for the specified namespaced Queue.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/namespaces/{namespace}/queues/{name}/_topology": {
      "get": {
        "operationId": "getTopologyQosEdaNokiaComV1NamespaceQueues",
        "parameters": [
          {
            "description": "name of the Queue to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the type of topology to retrieve",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "childrenAndParents",
              "enum": [
                "children",
                "parents",
                "childrenAndParents",
                "dependentCrs"
              ],
              "type": "string"
            }
          },
          {
            "description": "whether to recursively build the topology to include all layers or just a single layer of the topology",
            "in": "query",
            "name": "recurse",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceTopology"
                }
              }
            },
            "description": "Returns the topology of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get the topology for the specified namespaced Queue.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/policyattachments": {
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listQosEdaNokiaComV1Policyattachments",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyAttachmentList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list policyattachments",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/policydeployments": {
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listQosEdaNokiaComV1Policydeployments",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.PolicyDeploymentList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list policydeployments",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/qos.eda.nokia.com/v1/queues": {
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listQosEdaNokiaComV1Queues",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.qos.v1.QueueList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list queues",
        "tags": [
          "apps"
        ]
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}